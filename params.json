{"name":"Gowave","tagline":"Go client library for accessing the Wave API","body":"# Gowave\r\n\r\n[![Build Status](https://travis-ci.org/NickPresta/gowave.png?branch=master)](https://travis-ci.org/NickPresta/gowave)\r\n[![Coverage Status](http://i.imgur.com/pK6knhY.gif)](https://drone.io/github.com/NickPresta/gowave/files/coverage.html)\r\n[![GoDoc](https://godoc.org/github.com/NickPresta/gowave/wave?status.png)](https://godoc.org/github.com/NickPresta/gowave/wave)\r\n\r\ngowave is a Go client library for accessing the [Wave API](https://developer.waveapps.com).\r\n\r\ngowave requires Go version 1.2 or greater.\r\n\r\n**The wave package is in an ALPHA state.** There is no guarantee of interface stability until the Wave API is \"final\".\r\n\r\n## Installation\r\n\r\nTo download, build and install the wave package, run:\r\n\r\n\tgo get github.com/NickPresta/gowave/wave\r\n\r\n\r\n## Getting Started\r\n\r\nImport the wave package into your source:\r\n\r\n```go\r\nimport (\r\n  \"github.com/NickPresta/gowave/wave\"\r\n)\r\n```\r\n\r\nYou will need to create a new Wave client, which will allow you to make requests\r\non behalf of a user. The wave package does not handle authentication and\r\nrequires you to provide an http.Client that can handle appropriate\r\nauthentication. The easiest and recommended way to do this is using the [goauth2](https://code.google.com/p/goauth2/) package.\r\n\r\n```go\r\nt := &oauth.Transport{\r\n  Token: &oauth.Token{AccessToken: \"... your access token ...\"},\r\n}\r\n\r\nclient := wave.NewClient(t.Client())\r\n```\r\n\r\n## Creating and Updating Resources\r\n\r\nAll structs in this library use pointer values so that there is differentiation\r\nbetween an unset value and a zero value. This also allows the same structs to be\r\nencoded and decoded without having to learn two different data types.  Helper\r\nmethods are provided to create pointer values for string, int, float64, and\r\nbool:\r\n\r\n```go\r\nproduct := &wave.Product{\r\n\tName: wave.String(\"Widgets\"),\r\n\tPrice: wave.Float64(42.34),\r\n\tIsSold: wave.Bool(true),\r\n}\r\nclient.Products.Create(bID, product)\r\n```\r\n\r\n## Optional Parameters\r\n\r\nSome endpoints take optional parameters -- usually LIST and GET methods. For\r\nexample, with Products, you can choose to embed the accounts directly in the\r\nProduct resource. Optional parameters are passed as a pointer to a struct. If\r\nyou do not wish to pass any options and want to take the API defaults, set the\r\noptions struct to nil in the function argument. If you do not wish to pass a\r\nspecific option, you may omit it entirely from the struct. For example:\r\n\r\n```go\r\nclient.Products.List(bID, &ProductListOptions{EmbedAccounts: true})\r\n```\r\n\r\n### Pagination\r\n\r\nPagination options are passed in the optional parameters:\r\n\r\n```go\r\noptions = &ProductListOptions{PageOptions: wave.PageOptions{Page: 5, PageSize: 10}}\r\nclient.Products.List(bID, options)\r\n```\r\n\r\nAgain, omitting the PageOptions struct will not send any pagination parameters.\r\n\r\n## Examples\r\n\r\n### Fetch all Accounts for a given Business\r\n\r\n```go\r\naccounts, resp, err := client.Accounts.List(businessID)\r\nif err != nil {\r\n\tpanic(err)\r\n}\r\n// Do something with accounts\r\nfor account := range accounts {\r\n\tfmt.Println(*account.Name)\r\n}\r\n// The resp.Body still exists to be read, if you wanted to do further\r\n// processing or something\r\nio.Copy(os.Stdout, resp.Response.Body)\r\n```\r\n\r\n### Create a Business\r\n\r\n```go\r\nb := &Business{\r\n\tCompanyName:         \"My New Business\",\r\n\tPrimaryCurrencyCode: \"CAD\",\r\n\tBusinessTypeInfo: &BusinessTypeInfo{\r\n\t\tBusinessType:       String(\"consultants_professionals\"),\r\n\t\tBusinessSubtype:    String(\"consultants_professionals__communications\"),\r\n\t\tOrganizationalType: String(\"partnership_1\"),\r\n\t},\r\n\tAddress: &Address{\r\n\t\tCountry: &Country{\r\n\t\t\tCountryCode: \"CA\",\r\n\t\t},\r\n\t},\r\n}\r\nbusiness, _, err = integrationClient.Businesses.Create(b)\r\n// Do something with business\r\n```\r\n\r\n### Delete a Customer\r\n\r\n```go\r\nresp, err := client.Customers.Delete(businessID, customerID)\r\nif err == nil {\r\n\t// Customer deleted. Success!\r\n}\r\n```\r\n\r\n## Thanks and Inspiration\r\n\r\nThis library is heavily inspired by [go-github](https://github.com/google/go-github), although there is no affiliation\r\nor endorsement in any way by the go-github contributors or Google Inc itself.\r\n\r\n## License\r\n\r\nThis client library is distributed under the BSD-style license found in the [LICENSE](./LICENSE).\r\n","google":"UA-46745762-1","note":"Don't delete this file! It's used internally to help with page regeneration."}